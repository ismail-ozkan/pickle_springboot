14.03.2024
REST CRUD API implementasyonuna geçiş
frameworkü bu yapıya uygun şekillendirme
new folders adding

new rest methods

PickleApp CommandLineRunner içindeki yazılan tüm methodların REST API endpointe dönüştürülmesi hedeflendi
/api/users get methodu ile tüm user listesine ilşkin endpoint entityManager ile db den çekilen dataları göstermek için kullanıldı

15.03.2024
endpointlerde parametre kullanımına ilişkin geliştirme yapıldı

16.03.2024
@ExceptionHandler ile iki method geliştirildi, id yerine string veya db de olmayan bir id gönderildiğinde atılacak exception config edildi.

17.03.2024
Global exception handling implementation

API Design
For users controller adding post, put and delete methods.
While using put method to update a user we need to send all data to the server for now. It will configure to send partial data to update later.
Added exceptions into them as well

Connect two db tables -> users and addressDto

I decided to use Lombok annotations and add dependency

@OneToOne(cascade = CascadeType.ALL)
Cascade Ayarı: İlişkili entity'nin (adres) ana entity (kullanıcı) ile birlikte kaydedilmesini sağlamak için cascade ayarını kullanabilirsiniz. Bu, kullanıcı kaydedildiğinde adresin de otomatik olarak kaydedilmesini sağlar.

A new endpoint to get user addressDto adding
19.03.2024
missing part didn't complete.  incompatible with query return type error wait us tomorrow.

---
Servis katmanı eklenmesi
Genellikle bir servis katmanı eklenir çünkü bu, iş mantığını işlemek, veritabanı etkileşimlerini yönetmek ve uygulama mantığını ayırmak için iyi bir uygulama mimarisidir.
Controller sınıfı gelen HTTP isteğini alır, Service katmanına ileterek işlemi yaptırır, ardından Service katmanı da gerektiğinde DAO katmanını kullanarak veritabanı işlemlerini gerçekleştirir. Bu şekilde, iş mantığı katmanları birbirinden ayrılmış olur ve kodun bakımı ve testi daha kolay hale gelir. Ayrıca, ileride değişiklikler yapmak istediğinizde, sadece ilgili katmanı değiştirmeniz gerekir, diğer katmanlara dokunmanıza gerek kalmaz.

24.03.2024
4. section REST CRUD APIs done today.
JPA repository is learnt. But:  
Before implementing the JPA repository, a new branch and trial will be made regarding the global handle exception.

25.03.2024
gereksiz eski, fazlalık alanlar silindi
putmapping uygulaması yapıldı
exceptionlar bir packagede toplanıldı
exception handle lar controllerda mı service classlarında mı olacak bilinmediği için karışık konuldu

26.03.2024
role and claim table will be created and connected to the user table
role and claim repo service and impl created

27.03.2024
add claim to role impl

29.03.2024
project structure will be changed adding dto classes,
dao package name change with repository
rest package name change with controller
Ipml package will add into the service package to keep Impl class together
The most important changing in the project structure is adding and using Mapper
we need to add new dependency modelmapper
Adding mapper package
entity and dto class names updated

04.04.2024
project structure will be changed adding security configuration
1. add security dependency in pom.xml
2. Create Spring Security Configuration (@Configuration)
3. @Bean public SecurityFilterChain() in Config class
4. Add database support dependency mysql-connector-j to Maven POM file (it's already added before)
5. Drop user table and create again with new configuration
    comment out User Entity class old version and create new structure
    we need to comment out some places to handle creating new structure once
    then step by step configuration will be updated
6. Drop role table and create again with new configuration to set custom authentication
7. Lots of other changes in the classes and related other classes
8. setters for password encoding
